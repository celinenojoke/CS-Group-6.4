# Begin Code: Import the necessary Data
import streamlit as st
from datetime import datetime
import dateutil
import requests
import json

#####################################################################
# Define Class
class Connection:
    '''Connection class
       A class that holds information about the transport means (e.g. the trains) and the times of a connection
    '''
    def __init__(self, destination_x, destination_y, departure, arrival, transport_means):
        '''
        Connection constructor
        :param destination_x: the latitude of the destination
        :param destination_y: the longitude of the destination
        :param departure: a string containing the datetime for the departure
        :param arrival: a string containing the datetime for the arrival
        :param transport_means: a list of the transport means of the connection (e.g. ['IC 5'])
        '''

        # Create validate input types
        if (isinstance(destination_x,float) and isinstance(destination_y,float) and
            isinstance(departure,str) and isinstance(arrival,str) and
            isinstance(transport_means,list)):
            # Initialize connection attributes
            self.destination_x = destination_x
            self.destination_y = destination_y
            self.transport_means = transport_means

            # Parse departure and arrival times using dateutil.parser
            self.departure_time = dateutil.parser.parse(departure.split('+')[0])
            self.arrival_time = dateutil.parser.parse(arrival.split('+')[0])
        
        # Raise an attribute error if the input types are not valid
        else:
            raise AttributeError

            
    def __str__(self):
        # String representation of the Connection object
        return "{}: {}->{}".format(self.transport_means, self.departure_time, self.arrival_time)

    def get_unix_departure_time(self):
        '''
        Method get_Unix_departure_time
        Returns the local time of departure as a Unix timestamp
        '''
        return int((self.departure_time - datetime(1970,1,1)).total_seconds())

    def get_unix_arrival_time(self):
        '''
        Method get_Unix_arrival_time
        Returns the local time of arrival as a Unix timestamp
        '''
        return int((self.arrival_time - datetime(1970,1,1)).total_seconds())

    
    
#####################################################################    
# Streamlit App
def main():
    # Create streamlit app title
    st.title("Public Transport Connection App")

    # Input fields for origin, destination, date, and time
    origin = st.text_input("Point of Departure", value="St. Gallen")
    destination = st.text_input("Point of Arrival", value="ZÃ¼rich")
    date = st.date_input("Date")
    time = st.time_input("Time of Departure")

    # Build button to trigger connection search
    if st.button("Search for Connections"):
        # OpenData API URL for connections
        url = 'http://transport.opendata.ch/v1/connections'

        # Parameters for the API request
        params = {
            'from': origin,
            'to': destination,
            'date': date.strftime("%Y-%m-%d"),
            'time': time.strftime("%H:%M")
        }

        # Send API request
        response = requests.get(url, params=params)

        # Check if the request was successful (status code 200)
        if response.status_code == 200:
            # Parse JSON response
            connections = response.json()

            # Check if connections were found
            if connections.get("connections"):
                st.subheader("Fastest Connection:")
                # Find the fastest connection
                fastest_connection = min(connections["connections"], key=lambda x: dateutil.parser.parse(x['to']['arrival'].split('+')[0]))
                  
                
                # Calculate waiting time
                current_time = datetime.now()
                waiting_time = max((dateutil.parser.parse(fastest_connection['from']['departure'].split('+')[0]) - current_time).total_seconds(), 0)

                # Calculate the total travel time in seconds
                duration_parts = fastest_connection['duration'].split('d')
                days = int(duration_parts[0]) if len(duration_parts) > 1 else 0
                time_parts = duration_parts[-1].split(':')
                hours = int(time_parts[0])
                minutes = int(time_parts[1])
                seconds = int(time_parts[2])
                total_seconds = days * 24 * 60 * 60 + hours * 60 * 60 + minutes * 60 + seconds

                # Display information for the fastest connection
                departure_time = dateutil.parser.parse(fastest_connection['from']['departure'].split('+')[0])
                arrival_time = dateutil.parser.parse(fastest_connection['to']['arrival'].split('+')[0])

                # Calculate the total travel time
                total_travel_time = datetime.utcfromtimestamp(waiting_time + total_seconds).strftime('%H:%M:%S')

                # display result values and format to desired format(dd.mm.yyyy, hh:mm:ss)
                st.write(f"Departure: {departure_time.strftime('%d.%m.%Y %H:%M:%S')}")
                st.write(f"Arrival: {arrival_time.strftime('%d.%m.%Y %H:%M:%S')}")
                st.write(f"Point of Arrival: {fastest_connection['to']['station']['name']}")
                st.write(f"Waiting Time: {datetime.utcfromtimestamp(waiting_time).strftime('%H:%M:%S')}")
                st.write(f"Journey Time: {f'{hours:02d}:{minutes:02d}:{seconds:02d}'}")
                st.write(f"Travel Time SBB: {total_travel_time}")
                
                # Add subheader to display all stations on the route
                st.subheader("Stations on the Route:")
                for section in fastest_connection['sections']:
                    if section['journey']:
                        journey = section['journey']
                        for stop in journey['passList']:
                            st.write(f"Station: {stop['station']['name']} - Departure: {stop['departure']} - Arrival: {stop['arrival']}")
                        st.write("-" * 50)
                
            else:
                st.write("No Connection Found.")
        else:
            st.write("Error Getting Connections.")

if __name__ == "__main__":
    main()
# End Solution
